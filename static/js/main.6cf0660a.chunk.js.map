{"version":3,"sources":["components/Cell.jsx","components/Board.jsx","components/Overlay.jsx","components/Game.jsx","helpers.js","App.jsx","reportWebVitals.js","index.jsx"],"names":["Cell","value","props","className","Board","cells","player","wCells","handleClick","a","b","c","map","index","onClick","Overlay","message","close","Game","useState","Array","fill","moveLocation","history","setHistory","moveNumber","setMoveNumber","isXTurn","setIsXTurn","isSelectedMove","setIsSelectedMove","isClosed","setIsClosed","combination","winner","calculateWinner","isDraw","every","cell","checkDraw","status","toUpperCase","move","goToMove","newHistory","slice","newCells","rowNum","colNum","row","indexOf","calculateMoveLocation","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6cf0660a.chunk.js","sourcesContent":["function Cell({ value, ...props }) {\r\n\treturn <div className={`cell ${value ? value : ''}`} {...props} />\r\n}\r\n\r\nexport default Cell\r\n","import Cell from './Cell'\r\n\r\nfunction Board({ cells, player, wCells, handleClick }) {\r\n    const { a, b, c } = wCells\r\n\r\n\treturn (\r\n        <main className={`game-grid ${player}`}>\r\n            {cells.map((value, index) => (\r\n                <Cell key={index} value={`${value} ${a === index || b === index || c === index ? 'w' : ''}`} onClick={() => handleClick(index)} />\r\n            ))}\r\n        </main>\r\n\t)\r\n}\r\n\r\nexport default Board\r\n","function Overlay({ message, close }) {\r\n    return (\r\n        <div className=\"overlay-messages\">\r\n            <div>{message}</div>\r\n            <button onClick={close}>Close</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Overlay\r\n","import { Fragment, useState } from 'react'\r\nimport { calculateWinner, checkDraw, calculateMoveLocation } from '../helpers'\r\nimport Board from './Board'\r\nimport Overlay from './Overlay'\r\n\r\nfunction Game() {\r\n\tconst [history, setHistory] = useState([{ cells: new Array(9).fill(null), moveLocation: '' }])\r\n\tconst [moveNumber, setMoveNumber] = useState(0)\r\n\tconst [isXTurn, setIsXTurn] = useState(true)\r\n\tconst [isSelectedMove, setIsSelectedMove] = useState(null)\r\n\tconst [isClosed, setIsClosed] = useState(true)\r\n\tconst { cells } = history[moveNumber]\r\n\tconst { winner, wCells } = calculateWinner(cells)\r\n\tconst isDraw = checkDraw(cells)\r\n\tconst player = isXTurn ? 'x' : 'o'\r\n\r\n\tconst status = winner\r\n\t\t? `Winner: ${winner.toUpperCase()}`\r\n\t\t: isDraw\r\n\t\t? 'Cats game!'\r\n\t\t: `Next player: ${player.toUpperCase()}`\r\n\r\n\tconst handleClick = (index) => {\r\n\t\tconst newHistory = history.slice(0, moveNumber + 1)\r\n\t\tconst newCells = [...cells]\r\n\t\tconst moveLocation = calculateMoveLocation(index)\r\n\t\tif (winner || newCells[index]) return\r\n\t\tnewCells[index] = player\r\n\t\tsetHistory([...newHistory, { cells: newCells, moveLocation }])\r\n\t\tsetMoveNumber(newHistory.length)\r\n\t\tsetIsXTurn(!isXTurn)\r\n\t\tsetIsSelectedMove(null)\r\n\t\tsetIsClosed(true)\r\n\t}\r\n\r\n\tconst goToMove = (move) => {\r\n\t\tsetMoveNumber(move)\r\n\t\tsetIsXTurn(move % 2 === 0)\r\n\t\tsetIsSelectedMove(move)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className=\"floating-panel\">\r\n\t\t\t\t<p>{status}</p>\r\n\t\t\t\t<ol>\r\n\t\t\t\t\t{history.map(({ cells, moveLocation }, move) => (\r\n\t\t\t\t\t\t<li key={move}>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName={isSelectedMove === move && move > 0 ? 'selected' : ''}\r\n\t\t\t\t\t\t\t\tonClick={() => goToMove(move)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{move ? `Go to move #${move}` : `Go to game start`}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<span>{moveLocation && moveLocation}</span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ol>\r\n\t\t\t</div>\r\n\r\n\t\t\t<Board\r\n\t\t\t\tcells={cells}\r\n\t\t\t\tplayer={player}\r\n\t\t\t\twCells={wCells}\r\n\t\t\t\thandleClick={handleClick}\r\n\t\t\t/>\r\n\r\n\t\t\t{(winner || isDraw) && isClosed && (\r\n\t\t\t\t<Overlay message={status} close={() => setIsClosed(false)} />\r\n\t\t\t)}\r\n\t\t</Fragment>\r\n\t)\r\n}\r\n\r\nexport default Game\r\n","export const calculateWinner = (cells) => {\r\n\tconst winningCombinations = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t]\r\n\r\n\tfor (const combination of winningCombinations) {\r\n\t\tconst [a, b, c] = combination\r\n\r\n\t\tif (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n\t\t\treturn {\r\n\t\t\t\twinner: cells[a],\r\n\t\t\t\twCells: { a, b, c },\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\twinner: null,\r\n\t\twCells: { a: null, b: null, c: null },\r\n\t}\r\n}\r\n\r\nexport const checkDraw = (cells) => cells.every((cell) => cell !== null)\r\n\r\nexport const calculateMoveLocation = (moveNumber) => {\r\n\tif (typeof moveNumber !== 'number') return null\r\n\r\n\tconst table3By3 = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t]\r\n\r\n\tlet rowNum = 1,\r\n\t\tcolNum = null\r\n\r\n\tfor (const row of table3By3) {\r\n\t\tif (row.indexOf(moveNumber) > -1) {\r\n\t\t\tcolNum = row.indexOf(moveNumber) + 1\r\n\t\t\tbreak\r\n\t\t}\r\n\t\trowNum++\r\n\t}\r\n\t\r\n\treturn `pos: (${rowNum}, ${colNum})`\r\n}\r\n","import Game from './components/Game'\n\nfunction App() {\n\treturn <Game />\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}